import { describe, it } from "node:test";
import assert from "node:assert";
import { TechnicalAnalyzer } from "../src/lib/technical-indicators/technicalAnalyzer";
import type { TechnicalParametersConfig } from "../src/lib/technical-indicators/types";

/**
 * „Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„ÅÆÁµ±Âêà„ÉÜ„Çπ„Éà
 * Graceful Degradation„ÄÅ„Ç®„É©„ÉºÂæ©Êóß„ÄÅ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÊ©üÊßã„ÅÆÁ∑èÂêàÊ§úË®º
 */
describe("„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞Áµ±Âêà„ÉÜ„Çπ„Éà", () => {
	const timeout = 40000;

	describe("ÁÑ°ÂäπÈäòÊüÑ„Ç≥„Éº„Éâ„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞", () => {
		it("ÂÆåÂÖ®„Å´ÁÑ°Âäπ„Å™ÈäòÊüÑ„Ç≥„Éº„Éâ„Åß„ÅÆ„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞", { timeout }, async () => {
			try {
				await TechnicalAnalyzer.analyzeStockComprehensive("COMPLETELY_INVALID_SYMBOL_12345");
				assert.fail("„Ç®„É©„Éº„ÅåÁô∫Áîü„Åô„Åπ„Åç„Åß„Åô");
			} catch (error: any) {
				assert.ok(error);
				assert.ok(error.message || error.toString());
				console.log(`‚úÖ ÁÑ°ÂäπÈäòÊüÑ„Ç≥„Éº„Éâ„Ç®„É©„ÉºÁ¢∫Ë™ç: ${error.message || error.toString()}`);
			}
		});

		it("ÂΩ¢Âºè„Åå‰∏çÊ≠£„Å™ÈäòÊüÑ„Ç≥„Éº„Éâ„Åß„ÅÆ„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞", { timeout }, async () => {
			const invalidSymbols = [
				"",
				" ",
				"123",
				"!@#$%",
				"TOOLONGTOBEVALIDSYMBOLNAME123456789",
			];

			for (const invalidSymbol of invalidSymbols) {
				try {
					await TechnicalAnalyzer.analyzeStockComprehensive(invalidSymbol);
					// „Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Å™„ÅÑÂ†¥Âêà„ÇÇ„ÅÇ„Çã„Åå„ÄÅ„Åì„Çå„ÅØÊ≠£Â∏∏ÔºàGraceful DegradationÔºâ
					console.log(`‚ö†Ô∏è „Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åõ„Çì„Åß„Åó„ÅüÔºàÊ≠£Â∏∏„Å™ÂèØËÉΩÊÄßÔºâ: ${invalidSymbol}`);
				} catch (error: any) {
					assert.ok(error);
					console.log(`‚úÖ ‰∏çÊ≠£ÂΩ¢ÂºèÈäòÊüÑ„Ç≥„Éº„Éâ„Ç®„É©„ÉºÁ¢∫Ë™ç: ${invalidSymbol} -> ${error.message || error.toString()}`);
				}
			}
		});

		it("Â≠òÂú®„Åó„Å™„ÅÑÊó•Êú¨Ê†™„Ç≥„Éº„Éâ„Åß„ÅÆ„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞", { timeout }, async () => {
			try {
				await TechnicalAnalyzer.analyzeStockComprehensive("99999.T"); // Â≠òÂú®„Åó„Å™„ÅÑÈäòÊüÑÁï™Âè∑
				assert.fail("„Ç®„É©„Éº„ÅåÁô∫Áîü„Åô„Åπ„Åç„Åß„Åô");
			} catch (error: any) {
				assert.ok(error);
				console.log(`‚úÖ Â≠òÂú®„Åó„Å™„ÅÑÊó•Êú¨Ê†™„Ç≥„Éº„Éâ„Ç®„É©„ÉºÁ¢∫Ë™ç: ${error.message || error.toString()}`);
			}
		});
	});

	describe("„Éë„É©„É°„Éº„Çø„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞", () => {
		it("„Åô„Åπ„Å¶ÁÑ°Âäπ„Å™„Éë„É©„É°„Éº„Çø„Åß„ÅÆGraceful Degradation", { timeout }, async () => {
			const allInvalidParams: TechnicalParametersConfig = {
				movingAverages: { periods: [-1, -5, -10, 0, 2000] },
				rsi: { periods: [-1, 0, 500], overbought: 150, oversold: -50 },
				macd: { fastPeriod: -1, slowPeriod: -5, signalPeriod: -3 },
				bollingerBands: { period: -10, standardDeviations: -2 },
				stochastic: { kPeriod: -5, dPeriod: -2, overbought: 200, oversold: -100 },
				volumeAnalysis: { period: -15, spikeThreshold: -1 },
				vwap: { enableTrueVWAP: true, standardDeviations: -1 },
				mvwap: { period: -20, standardDeviations: -1 },
			};

			// „Ç®„É©„Éº„ÅåÁô∫Áîü„Åõ„Åö„Å´ÁµêÊûú„ÅåËøî„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™çÔºà„Éë„É©„É°„Éº„ÇøËá™Âãï‰øÆÊ≠£Ôºâ
			const { result, errorReports } = await TechnicalAnalyzer.analyzeStockComprehensive("AAPL", "1y", true, allInvalidParams);

			assert.ok(result);
			assert.strictEqual(result.symbol, "AAPL");
			assert.ok(result.technicalIndicators);
			assert.ok(result.extendedIndicators);

			// „Éë„É©„É°„Éº„ÇøÊ§úË®º„Åß‰øÆÊ≠£„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
			const { ParameterValidator } = await import("../src/lib/technical-indicators/utils/parameterValidator");
			const validationResult = ParameterValidator.validateAndSetDefaults(allInvalidParams);
			
			assert.ok(validationResult.validatedParams);
			assert.ok(Array.isArray(validationResult.warnings));
			
			// Ë≠¶Âëä„ÅåÁîüÊàê„Åï„Çå„Å¶„ÅÑ„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
			assert.ok(validationResult.warnings.length > 0, "ÁÑ°Âäπ„Éë„É©„É°„Éº„Çø„Å´ÂØæ„Åó„Å¶Ë≠¶Âëä„ÅåÁîüÊàê„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ");

			console.log(`‚úÖ ÂÖ®ÁÑ°Âäπ„Éë„É©„É°„Éº„Çø„Åß„ÅÆGraceful DegradationÁ¢∫Ë™ç (Ë≠¶ÂëäÊï∞: ${validationResult.warnings.length}, „Ç®„É©„ÉºÊï∞: ${errorReports.length})`);
		});

		it("ÈÉ®ÂàÜÁöÑ„Å´ÁÑ°Âäπ„Å™„Éë„É©„É°„Éº„Çø„Åß„ÅÆÊ∑∑Âú®Âá¶ÁêÜ", { timeout }, async () => {
			const mixedParams: TechnicalParametersConfig = {
				movingAverages: { periods: [10, -5, 50, 2000, 200] }, // ÊúâÂäπ„ÉªÁÑ°ÂäπÊ∑∑Âú®
				rsi: { periods: [14], overbought: 150 }, // 1„Å§ÊúâÂäπ„ÄÅ1„Å§ÁÑ°Âäπ
				macd: { fastPeriod: 12, slowPeriod: -1, signalPeriod: 9 }, // 2„Å§ÊúâÂäπ„ÄÅ1„Å§ÁÑ°Âäπ
			};

			const { result, errorReports } = await TechnicalAnalyzer.analyzeStockComprehensive("AAPL", "1y", true, mixedParams);

			assert.ok(result);
			assert.ok(result.technicalIndicators);

			// ÊúâÂäπ„Å™„Éë„É©„É°„Éº„Çø„ÅØÊ≠£„Åó„ÅèÂá¶ÁêÜ„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
			assert.ok(result.technicalIndicators.movingAverages);
			assert.ok(result.technicalIndicators.rsi);
			assert.ok(result.technicalIndicators.macd);

			console.log(`‚úÖ Ê∑∑Âú®„Éë„É©„É°„Éº„Çø„Åß„ÅÆÂá¶ÁêÜÁ¢∫Ë™ç („Ç®„É©„ÉºÊï∞: ${errorReports.length})`);
		});
	});

	describe("APIÂà∂Èôê„Éª„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç®„É©„Éº„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥", () => {
		it("Áü≠ÊúüÈñì„Åß„ÅÆË§áÊï∞APIÂëº„Å≥Âá∫„Åó„Å´„Çà„ÇãÂà∂Èôê„ÉÜ„Çπ„Éà", { timeout }, async () => {
			const symbols = ["AAPL", "MSFT", "GOOGL"];
			const promises = symbols.map(symbol => 
				TechnicalAnalyzer.analyzeStockComprehensive(symbol, "1y", true)
			);

			// ‰∏¶ÂàóÂÆüË°å„ÅßÂà∂Èôê„Å´ÈÅ≠ÈÅá„Åô„ÇãÂèØËÉΩÊÄß„Çí„ÉÜ„Çπ„Éà
			const results = await Promise.allSettled(promises);

			// Â∞ë„Å™„Åè„Å®„ÇÇ‰∏ÄÈÉ®„ÅØÊàêÂäü„Åô„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
			const successCount = results.filter(result => result.status === 'fulfilled').length;
			const errorCount = results.filter(result => result.status === 'rejected').length;

			console.log(`üìä ‰∏¶ÂàóAPIÂëº„Å≥Âá∫„ÅóÁµêÊûú: ÊàêÂäü${successCount}‰ª∂, „Ç®„É©„Éº${errorCount}‰ª∂`);
			
			// „Åô„Åπ„Å¶„Åå„Ç®„É©„Éº„Åß„Å™„ÅÑ„Åì„Å®„ÇíÁ¢∫Ë™çÔºàÂ∞ë„Å™„Åè„Å®„ÇÇ1„Å§„ÅØÊàêÂäüÔºâ
			assert.ok(successCount > 0, "„Åô„Åπ„Å¶„ÅÆAPIÂëº„Å≥Âá∫„Åó„ÅåÂ§±Êïó„Åó„Åæ„Åó„Åü");

			console.log("‚úÖ Áü≠ÊúüÈñì„Åß„ÅÆË§áÊï∞APIÂëº„Å≥Âá∫„ÅóÂà∂Èôê„ÉÜ„Çπ„ÉàÂÆå‰∫Ü");
		});

		it("Â§ßÈáè„Éá„Éº„ÇøÂá¶ÁêÜÊôÇ„ÅÆ„É°„É¢„É™„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞", { timeout }, async () => {
			// Â§ß„Åç„Å™ÊúüÈñìÈÖçÂàó„Åß„ÅÆÂá¶ÁêÜ„ÉÜ„Çπ„Éà
			const largeParams: TechnicalParametersConfig = {
				movingAverages: { 
					periods: Array.from({length: 20}, (_, i) => 5 + i * 10) // 5, 15, 25, ..., 195
				},
				rsi: { periods: [7, 14, 21, 28, 35, 42, 49] },
			};

			const { result, errorReports } = await TechnicalAnalyzer.analyzeStockComprehensive("AAPL", "1y", true, largeParams);

			// „É°„É¢„É™„Ç®„É©„Éº„ÅåÁô∫Áîü„Åõ„Åö„Å´ÂÆå‰∫Ü„Åô„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
			assert.ok(result);
			assert.ok(result.technicalIndicators);

			console.log(`‚úÖ Â§ßÈáè„Éá„Éº„ÇøÂá¶ÁêÜÊôÇ„ÅÆ„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞Á¢∫Ë™ç („Ç®„É©„ÉºÊï∞: ${errorReports.length})`);
		});
	});

	describe("Ë®àÁÆó„Ç®„É©„Éº„ÉªÊï∞ÂÄ§„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞", () => {
		it("Ë®àÁÆó‰∏çÂèØËÉΩ„Å™„Éá„Éº„Çø„Åß„ÅÆGraceful Degradation", { timeout }, async () => {
			// ÈùûÂ∏∏„Å´Áü≠„ÅÑÊúüÈñì„Åß„ÅÆË®àÁÆó„ÉÜ„Çπ„ÉàÔºàË®àÁÆóÂõ∞Èõ£„Ç∑„Éä„É™„Ç™Ôºâ
			const difficultParams: TechnicalParametersConfig = {
				movingAverages: { periods: [1, 2] }, // ÈùûÂ∏∏„Å´Áü≠„ÅÑ
				rsi: { periods: [1] },
				macd: { fastPeriod: 1, slowPeriod: 2, signalPeriod: 1 },
				bollingerBands: { period: 2, standardDeviations: 0.1 },
			};

			const { result, errorReports } = await TechnicalAnalyzer.analyzeStockComprehensive("AAPL", "1y", true, difficultParams);

			// „Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Å¶„ÇÇÂü∫Êú¨ÊßãÈÄ†„ÅØ‰øù„Åü„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
			assert.ok(result);
			assert.ok(result.technicalIndicators || result.extendedIndicators);

			console.log(`‚úÖ Ë®àÁÆóÂõ∞Èõ£„Éá„Éº„Çø„Åß„ÅÆGraceful DegradationÁ¢∫Ë™ç („Ç®„É©„ÉºÊï∞: ${errorReports.length})`);
		});

		it("NaN„ÉªInfinityÂÄ§„ÅÆÂá¶ÁêÜ", { timeout }, async () => {
			// Ê•µÁ´Ø„Å™Ê®ôÊ∫ñÂÅèÂ∑ÆË®≠ÂÆö„ÅßNaN„ÅåÁô∫Áîü„Åô„ÇãÂèØËÉΩÊÄß„Çí„ÉÜ„Çπ„Éà
			const extremeParams: TechnicalParametersConfig = {
				bollingerBands: { period: 5, standardDeviations: 100 }, // Ê•µÁ´Ø„Å´Â§ß„Åç„ÅÑÊ®ôÊ∫ñÂÅèÂ∑Æ
				vwap: { standardDeviations: 50 },
				mvwap: { period: 5, standardDeviations: 50 },
			};

			const { result, errorReports } = await TechnicalAnalyzer.analyzeStockComprehensive("AAPL", "1y", true, extremeParams);

			assert.ok(result);
			// NaN/Infinity„ÅåÈÅ©Âàá„Å´Âá¶ÁêÜ„Åï„Çå„Çã„Åì„Å®„ÇíÊúüÂæÖ
			
			console.log(`‚úÖ NaN„ÉªInfinityÂÄ§„ÅÆÂá¶ÁêÜÁ¢∫Ë™ç („Ç®„É©„ÉºÊï∞: ${errorReports.length})`);
		});
	});

	describe("Áµ±Âêà„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏ÁîüÊàê„ÉÜ„Çπ„Éà", () => {
		it("Ë§áÊï∞„Ç®„É©„Éº„ÅÆÁµ±Âêà„É°„ÉÉ„Çª„Éº„Ç∏ÁîüÊàê", { timeout }, async () => {
			const problematicParams: TechnicalParametersConfig = {
				movingAverages: { periods: [-1, 0, 1000] },
				rsi: { periods: [-5], overbought: 200 },
				vwap: { enableTrueVWAP: true, standardDeviations: -1 },
			};

			const { result, errorReports } = await TechnicalAnalyzer.analyzeStockComprehensive("AAPL", "1y", true, problematicParams);

			assert.ok(result);
			
			if (errorReports.length > 0) {
				const { ErrorHandler } = await import("../src/lib/technical-indicators/utils/errorHandler");
				const consolidatedMessage = ErrorHandler.generateConsolidatedUserMessage(errorReports);
				
				assert.ok(typeof consolidatedMessage === 'string');
				console.log(`üìù Áµ±Âêà„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏ (${errorReports.length}‰ª∂):\n${consolidatedMessage}`);
			}

			console.log("‚úÖ Ë§áÊï∞„Ç®„É©„Éº„ÅÆÁµ±Âêà„É°„ÉÉ„Çª„Éº„Ç∏ÁîüÊàêÁ¢∫Ë™çÂÆå‰∫Ü");
		});

		it("„Ç®„É©„ÉºÂàÜÈ°û„Å®ÂÑ™ÂÖàÂ∫¶‰ªò„Åë„ÉÜ„Çπ„Éà", { timeout }, async () => {
			// Áï∞„Å™„ÇãÁ®ÆÈ°û„ÅÆ„Ç®„É©„Éº„ÇíÊÑèÂõ≥ÁöÑ„Å´Áô∫Áîü„Åï„Åõ„Çã
			const mixedErrorParams: TechnicalParametersConfig = {
				movingAverages: { periods: [] }, // Á©∫ÈÖçÂàó
				rsi: { periods: [0, -1, 1000] }, // Ë§áÊï∞„ÅÆÁÑ°ÂäπÂÄ§
				macd: { fastPeriod: 50, slowPeriod: 10, signalPeriod: 20 }, // Ë´ñÁêÜÁöÑÁüõÁõæÔºàfast > slowÔºâ
			};

			const { result, errorReports } = await TechnicalAnalyzer.analyzeStockComprehensive("AAPL", "1y", true, mixedErrorParams);

			assert.ok(result);
			
			// „Ç®„É©„Éº„É¨„Éù„Éº„Éà„ÅÆÊßãÈÄ†Á¢∫Ë™ç
			if (errorReports.length > 0) {
				for (const errorReport of errorReports) {
					assert.ok(errorReport.userMessage);
					assert.ok(errorReport.technicalDetails);
					assert.ok(errorReport.context);
				}
			}

			console.log(`‚úÖ „Ç®„É©„ÉºÂàÜÈ°û„Å®ÂÑ™ÂÖàÂ∫¶‰ªò„ÅëÁ¢∫Ë™ç (ÂàÜÈ°û„Åï„Çå„Åü„Ç®„É©„ÉºÊï∞: ${errorReports.length})`);
		});
	});

	describe("„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÊ©üÊßãÁµ±Âêà„ÉÜ„Çπ„Éà", () => {
		it("Áúü„ÅÆVWAPÂ§±ÊïóÊôÇ„ÅÆMVWAP„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ", { timeout }, async () => {
			const vwapParams: TechnicalParametersConfig = {
				vwap: { enableTrueVWAP: true },
				mvwap: { period: 20 }, // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÁî®
			};

			const { result, errorReports } = await TechnicalAnalyzer.analyzeStockComprehensive("AAPL", "1y", true, vwapParams);

			assert.ok(result);
			assert.ok(result.extendedIndicators);

			// ‰Ωï„Çâ„Åã„ÅÆVWAPË®àÁÆóÁµêÊûú„ÅåÂ≠òÂú®„Åô„Çã„Åì„Å®„ÇíÁ¢∫Ë™çÔºà„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÂê´„ÇÄÔºâ
			const hasVwap = 'vwap' in result.extendedIndicators;
			const hasMvwap = 'mvwap' in result.extendedIndicators;
			assert.ok(hasVwap || hasMvwap, "VWAP„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÊ©üÊßã„ÅåÂãï‰Ωú„Åó„Å¶„ÅÑ„Å™„ÅÑ");

			console.log(`‚úÖ VWAP„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÊ©üÊßãÁ¢∫Ë™ç („Ç®„É©„ÉºÊï∞: ${errorReports.length})`);
		});

		it("ÈÉ®ÂàÜÁöÑ„Å™ÊåáÊ®ôË®àÁÆóÂ§±ÊïóÊôÇ„ÅÆÁ∂ôÁ∂öÂá¶ÁêÜ", { timeout }, async () => {
			// ‰∏ÄÈÉ®„ÅÆÊåáÊ®ô„ÅßÂïèÈ°å„ÅåÁô∫Áîü„Åô„ÇãÂèØËÉΩÊÄß„ÅÆÈ´ò„ÅÑË®≠ÂÆö
			const partialFailureParams: TechnicalParametersConfig = {
				movingAverages: { periods: [1] }, // ÂïèÈ°å„ÅÆÂèØËÉΩÊÄß
				rsi: { periods: [14, 21] }, // Ê≠£Â∏∏
				macd: { fastPeriod: 12, slowPeriod: 26, signalPeriod: 9 }, // Ê≠£Â∏∏
				bollingerBands: { period: 1, standardDeviations: 1 }, // ÂïèÈ°å„ÅÆÂèØËÉΩÊÄß
			};

			const { result, errorReports } = await TechnicalAnalyzer.analyzeStockComprehensive("AAPL", "1y", true, partialFailureParams);

			assert.ok(result);
			
			// Â∞ë„Å™„Åè„Å®„ÇÇ‰∏ÄÈÉ®„ÅÆÊåáÊ®ô„ÅØË®àÁÆó„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
			const hasAnyIndicator = (
				result.technicalIndicators?.rsi ||
				result.technicalIndicators?.macd ||
				result.technicalIndicators?.movingAverages ||
				result.extendedIndicators?.bollingerBands
			);
			assert.ok(hasAnyIndicator, "„Åô„Åπ„Å¶„ÅÆÊåáÊ®ôË®àÁÆó„ÅåÂ§±Êïó„Åó„Åæ„Åó„Åü");

			console.log(`‚úÖ ÈÉ®ÂàÜÁöÑË®àÁÆóÂ§±ÊïóÊôÇ„ÅÆÁ∂ôÁ∂öÂá¶ÁêÜÁ¢∫Ë™ç („Ç®„É©„ÉºÊï∞: ${errorReports.length})`);
		});
	});

	describe("„É¨„Éù„Éº„ÉàÁîüÊàê„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞", () => {
		it("‰∏çÂÆåÂÖ®„Å™„Éá„Éº„Çø„Åß„ÅÆ„É¨„Éù„Éº„ÉàÁîüÊàê", { timeout }, async () => {
			// Ë®àÁÆóÂõ∞Èõ£„Å™Ë®≠ÂÆö„Åß‰∏çÂÆåÂÖ®„Å™„Éá„Éº„Çø„Çí‰ΩúÊàê
			const incompleteParams: TechnicalParametersConfig = {
				movingAverages: { periods: [1, 2] },
				rsi: { periods: [1] },
			};

			const { result, errorReports } = await TechnicalAnalyzer.analyzeStockComprehensive("AAPL", "1y", true, incompleteParams);

			// ‰∏çÂÆåÂÖ®„Åß„ÇÇ„É¨„Éù„Éº„Éà„ÅåÁîüÊàê„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç
			const report = TechnicalAnalyzer.generateJapaneseReportFromAnalysis(result, 7);
			assert.ok(report);
			assert.ok(typeof report === 'string');
			assert.ok(report.includes("AAPL"));

			console.log(`‚úÖ ‰∏çÂÆåÂÖ®„Éá„Éº„Çø„Åß„ÅÆ„É¨„Éù„Éº„ÉàÁîüÊàêÁ¢∫Ë™ç („Ç®„É©„ÉºÊï∞: ${errorReports.length})`);
		});

		it("„Ç®„É©„ÉºÊÉÖÂ†±‰ªò„Åç„É¨„Éù„Éº„ÉàÁµ±Âêà", { timeout }, async () => {
			const errorProneParams: TechnicalParametersConfig = {
				movingAverages: { periods: [-5, 1000] },
				vwap: { enableTrueVWAP: true, standardDeviations: -1 },
			};

			const { result, errorReports } = await TechnicalAnalyzer.analyzeStockComprehensive("AAPL", "1y", true, errorProneParams);

			// „Éë„É©„É°„Éº„ÇøÊ§úË®º„Å®„É¨„Éù„Éº„ÉàÁîüÊàê
			const { ParameterValidator } = await import("../src/lib/technical-indicators/utils/parameterValidator");
			const validationResult = ParameterValidator.validateAndSetDefaults(errorProneParams);
			
			const report = TechnicalAnalyzer.generateJapaneseReportFromAnalysis(
				result, 
				7, 
				validationResult.validatedParams, 
				errorProneParams
			);

			// „Ç®„É©„ÉºÊÉÖÂ†±„ÇíÂê´„ÇÄÁµ±Âêà„É°„ÉÉ„Çª„Éº„Ç∏ÁîüÊàê
			const { ErrorHandler } = await import("../src/lib/technical-indicators/utils/errorHandler");
			const consolidatedErrorMessage = ErrorHandler.generateConsolidatedUserMessage(errorReports);
			
			const finalReport = consolidatedErrorMessage ? `${report}\n\n---\n\n${consolidatedErrorMessage}` : report;

			assert.ok(finalReport);
			assert.ok(finalReport.includes("AAPL"));

			console.log(`‚úÖ „Ç®„É©„ÉºÊÉÖÂ†±‰ªò„Åç„É¨„Éù„Éº„ÉàÁµ±ÂêàÁ¢∫Ë™ç (Áµ±ÂêàÂæåÊñáÂ≠óÊï∞: ${finalReport.length})`);
		});
	});

	describe("„É™„Ç¢„É´„Çø„Ç§„É†„Ç®„É©„ÉºÂæ©Êóß„ÉÜ„Çπ„Éà", () => {
		it("Ë§áÊï∞ÈäòÊüÑ„Åß„ÅÆÈÄ£Á∂ö„Ç®„É©„ÉºÂá¶ÁêÜ", { timeout }, async () => {
			const testCases = [
				{ symbol: "AAPL", params: { movingAverages: { periods: [-1, 25, 50] } } },
				{ symbol: "INVALID123", params: { rsi: { periods: [999] } } },
				{ symbol: "MSFT", params: { macd: { fastPeriod: -1, slowPeriod: 26, signalPeriod: 9 } } },
			];

			for (const testCase of testCases) {
				try {
					const { result, errorReports } = await TechnicalAnalyzer.analyzeStockComprehensive(
						testCase.symbol, 
						"1y", 
						true, 
						testCase.params
					);
					
					if (result) {
						console.log(`‚úÖ ${testCase.symbol}: ÊàêÂäü („Ç®„É©„ÉºÊï∞: ${errorReports.length})`);
					}
				} catch (error: any) {
					console.log(`‚ö†Ô∏è ${testCase.symbol}: „Ç®„É©„Éº - ${error.message || error.toString()}`);
					// „Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Å¶„ÇÇÊ¨°„ÅÆ„ÉÜ„Çπ„Éà„Ç±„Éº„Çπ„Å´Á∂ôÁ∂ö
				}
			}

			console.log("‚úÖ Ë§áÊï∞ÈäòÊüÑ„Åß„ÅÆÈÄ£Á∂ö„Ç®„É©„ÉºÂá¶ÁêÜÁ¢∫Ë™çÂÆå‰∫Ü");
		});
	});
});